游戏的基本框架：当我们在写一个内容的时候，我们需要从多个方面去审视它，从而才能判断目前的写法是否适配这些内容
例如，我们需要写一个玩家进入门后，切换游戏的背景音乐。
看起来似乎只是trigger zone（游戏交互），音乐播放以触发的方式播放。
但实际，游戏要完成的话，这里面涉及的内容会更多
例如音乐如果是触发的，那么当玩家读档到这里的时候，音乐是没有改变的，所以这是需要存档音乐的，但是这就需要音乐的数据本身是被存储好了的，所以就需要一个audio manager
甚至可能当玩家进入trigger zone，需要触发某个UI提示玩家

1.游戏交互：
    a.mini game
    b.角色控制，抓取，移动等等
    c.trigger zone
2.游戏UI：
    a.实时更新的UI与事件更新的UI
    b.UI交互
    c.MCV
3.游戏暂停：
    a.进入游戏菜单和暂停的系统应该分开来
    b.暂停可以以event发布，方便集中管理
    c.什么时候可以暂停
    d.什么事件可以触发暂停
4.游戏存读档：
    a.如何管理数据：角色信息存档，关卡存档（敌人位置），全局存档（成就），setting存档
    b.如何选择序列化的形式，并保持序列化形式可以方便切换
    c.存档可以用事件发布
    d.如何先读取存档关卡后->再读取状态,并传递给不同的object。
5.关卡切换：
    a.关卡切换可以单独由一个manager进行管理
    b.什么时候可以切换，且切换的时候游戏是什么状态
6.游戏的settings：
    a.也需要存取，可以用Json方式，方便debug
    b.如何apply：是实时切换么？是通过询问是否apply么？是否需要重启游戏
    c.更改settings时，如何通知UI
7.游戏的audio:
    a.需要一个audio manager
    b.audio manager负责什么样的audio，也许是会根据游戏进度切换的ambience或music
    c.audio clip以SO的方式储存么？